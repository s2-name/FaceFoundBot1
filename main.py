''' The main file of the FaceFoundBot bot.
Take a look at config.py and write your tokens (Telegram and QiWI),
as well as MySQL server authorization data.
And also change the list of administrators (ADMINS_LIST) '''
import datetime
import logging

from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import *
from DB import DataBase
from Payments import Payments
from FaceFound import FaceFound
from keyboards import *
from states import *

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

db = DataBase('db.db')
# pay = Payments(QiWiTOKEN, db)

face_found = FaceFound(db=db, tmp_dir=TMP_IMG_DIR, save_dir=SAVE_IMG_DIR)

# -------------logs------------
logging.basicConfig(
    filename="all_log.log",
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s -%(message)s')
warning_log = logging.getLogger("warning_log")
warning_log.setLevel(logging.WARNING)
fh = logging.FileHandler("warning_log.log")
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
warning_log.addHandler(fh)
# -------------logs-------------


def check_user_status(user_id):
    status = {
        'is_reg': True,
        'is_ban': False,
        'are_attempts_available': True
    }
    user = db.get_user(user_id)

    if user[1] is None:
        status['is_reg'] = False
        return status
    else:
        if user[1][5] == -1:
            status['is_ban'] = True

    # if user isn`t an admin or vip and his number of requests is less than the maximum
    if not user[1][5] in [1, 2] and db.get_count_requests(user_id)[1] >= COUNT_OF_USERS_REQUESTS:
        status['are_attempts_available'] = False
    return status


# -------------commands-------------
@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    hello_mess = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è {message.from_user.first_name}.\n" \
                 f"–î–∞–Ω–Ω—ã–π –±–æ—Ç —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –ª—é–¥–µ–π –ø–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö." \
                 f"–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /s\n"
    if not check_user_status(message.from_user.id)['is_reg']:  # if the user exists in DB
        hello_mess += f"–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å —Å–≤–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.\n–§–æ—Ä–º–∞—Ç: –¥.–º.–≥"
        await bot.send_message(message.from_user.id, hello_mess)
        await state.set_state(RegUserStates.choosing_date_of_birth)
    else:
        await bot.send_message(message.from_user.id, hello_mess)


@dp.message_handler(state=RegUserStates.choosing_date_of_birth, content_types=['text'])
async def get_user_date_of_birth(message, state: FSMContext):

    date_of_birth = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
    if (datetime.datetime.now().date() - date_of_birth).days > 6570:
        await state.update_data(date_of_birth=date_of_birth)
        with open('licence.txt', 'r') as f:
            await bot.send_document(
                message.from_user.id,
                caption="–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å, –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                document=f,
                reply_markup=make_inline_keyboard(
                    [{'text': "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", 'url': "", 'callback': "user_accept_the_license"}]
                )
            )
        await state.set_state(RegUserStates.choosing_confirmation_acceptance)
    else:
        await bot.send_message(message.from_user.id, "–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç")
        db.add_user(message.from_user.id, message.from_user.first_name, message.from_user.username, str(date_of_birth), status=-1)


@dp.callback_query_handler(text="user_accept_the_license", state=RegUserStates.choosing_confirmation_acceptance)
async def create_user(call: types.CallbackQuery, state):
    state_data = await state.get_data()
    db.add_user(
        call.from_user.id,
        call.from_user.first_name,
        call.from_user.username,
        str(state_data.get('date_of_birth'))
    )
    await state.reset_state()
    await bot.send_message(call.from_user.id, "–û—Ç–ª–∏—á–Ω–æ, —è –∑–∞—Ä–µ–≥–∏—Ç—Å—Ä–∏—Ä–æ–≤–∞–ª –í–∞—à –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüôÉ")
    await call.answer()


@dp.message_handler(commands=['help'], state='*')
async def help(message: types.Message, state: FSMContext):
    await bot.send_message(
        message.from_user.id,
        f"–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n"
        f"–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –æ—Ç—á–µ—Ç–ª–∏–≤–æ –≤–∏–¥–∏–º—ã–º –ª–∏—Ü–æ–º –∏ —è –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Å–≤–æ–µ–π –±–∞–∑–µ.\n"
        f"–¢–∞–∫–∂–µ –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        f"/start - –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è,\n"
        f"/s - –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–µ–∑ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã,\n"
        f"/del - —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –±–∞–∑—ã,\n/help - –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.\n"
        f"–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{ADMIN_USERNAME}")  # look config.py


async def search_photo_in_db(message: types.Message) -> (bool, ()):

    db.add_request(message.from_user.id)
    photo = message.photo[-1]
    photo_file = await photo.download(destination_dir=TMP_IMG_DIR)
    matches_found = face_found.find_face(photo_file.name)
    os.remove(photo_file.name)
    if not matches_found:
        return False, ()
    mess = "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã! –°–ø–∏—Å–æ–∫:\n"
    images = []
    peoples_found = db.get_face_encodings_data_by_id(matches_found)
    if peoples_found[0]:
        for people in peoples_found[1]:
            mess += (people[0] or "") + "\n"  # source_url
            images.append(people[1])  # image_url
    else:
        await bot.send_message(message.from_user.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. /help")
        return False
    mess += "–≠—Ç–æ –Ω–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞ –í–∞—à–µ–º —Ñ–æ—Ç–æ –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π(–µ) —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —á–µ–ª–æ–≤–µ–∫!"
    return True, (mess, images)


@dp.message_handler(content_types=['photo'], state="*")
async def photo(message: types.Message, state: FSMContext):
    text = message.caption
    if text:
        text = text.split()
    else:
        await search(message, state)
        return

    if text[0] == '/s' or text[0] == '/search':
        await search(message, state)
        return
    if text[0] == '/add':
        await add(message, state)
        return


@dp.message_handler(commands=['s', 'search'], state='*')
async def search(message: types.Message, state: FSMContext):

    user_status = check_user_status(message.from_user.id)

    if user_status['is_ban']:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!")
        return

    if not user_status['is_reg']:
        await start(message, state)
        return

    if not user_status['are_attempts_available']:
        await bot.send_message(message.from_user.id, f"–í –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ {COUNT_OF_USERS_REQUESTS} –ø–æ–∏—Å–∫–æ–≤.")
        return

    if message.photo:
        matches = await search_photo_in_db(message)
        if matches[0]:
            media = types.MediaGroup()
            for coincidence in matches[1][1]:
                media.attach_photo(types.InputFile(coincidence))
            await bot.send_message(message.from_user.id, matches[1][0])
            await bot.send_media_group(message.from_user.id, media=media)
        else:
            await bot.send_message(message.from_user.id, "–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.reset_state()
        return
    await bot.send_message(message.from_user.id, "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫–∞.\n"
                                                 "–ù–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç—á—ë—Ç–ª–∏–≤–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ.\n"
                                                 "–í–Ω–∏–º–∞–Ω–∏–µ! –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ–∫–∏ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö –∏–ª–∏"
                                                 " —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§, –≤ —Ç–æ–º —á–∏—Å–ª–µ "
                                                 "—Ñ–æ—Ç–æ- –∏ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.")


@dp.message_handler(commands=['del'], state='*')
async def delete(message: types.Message, state: FSMContext):
    user_status = check_user_status(message.from_user.id)
    if user_status['is_ban']:
        await bot.send_message(message.from_user.id, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã! –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ(")
        return
    await bot.send_message(message.from_user.id,
                           "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∞—É–Ω—Ç. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å, –≤—ã —É–≤–µ—Ä–µ–Ω—ã?\n"
                           "–í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ–π vip-—Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω –∏–º–µ–µ—Ç—Å—è.",
                           reply_markup=make_inline_keyboard([
                               {'text': "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)", 'url': "", 'callback': "dell_acc_yes"},
                               {'text': "–û—Ç–º–µ–Ω–∞", 'url': "", 'callback': "dell_acc_cancel"}
                           ]))


@dp.callback_query_handler(text="dell_acc_yes", state='*')
async def dell_acc_yes(call: types.CallbackQuery, state: FSMContext):

    if db.del_user(call.from_user.id):
        await bot.send_message(call.from_user.id, "–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω")
        await call.message.delete()
    else:
        await bot.send_message(call.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. /help")
    await call.answer()


@dp.callback_query_handler(text="dell_acc_cancel", state='*')
async def dell_acc_cancel(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.answer()

async def add(message: types.Message, state: FSMContext):

    if not message.from_user.id in ADMINS_LIST:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ ‚ùå")
        return
    photo_file = None
    if message.photo:
        photo_file = await message.photo[-1].download(destination_dir=TMP_IMG_DIR)

    text = message.caption.split()
    source = None
    if len(text) == 2:
        source = text[1]

    if photo_file:
        if face_found.add_face_in_db(photo_file.name, source):
            await bot.send_message(message.from_user.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ ‚úÖ")
        else:
            await bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ‚ùå")
    else:
        await bot.send_message(message.from_user.id, "–§–æ—Ä–º–∞—Ç: —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è + /add [—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫]")


# @dp.message_handler(commands=['vip'], state='*')
# @dp.message_handler(lambda message: message.text == 'vip', state='*')
# async def vip(message):
#     id = message.from_user.id
#     if db.is_vip(id):
#         await bot.send_message(id, "–í—ã —É–∂–µ VIP, —Å–ø–∞—Å–∏–±–æ!")
#     else:
#         keyBoard = InlineKeyboardMarkup()
#         keyBoard.add(
#             InlineKeyboardButton(text="–•–æ—á—É –±—ã—Ç—å VIPüíé", callback_data="buy_vip")
#         )
#         await bot.send_message(id, "<b>VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b> –º–æ–≥—É—Ç: –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑",
#                                parse_mode=ParseMode.HTML,
#                                reply_markup=make_inline_keyboard([
#                                    {'text': "–•–æ—á—É –±—ã—Ç—å VIPüíé", 'callback': "buy_vip"}
#                                ]))
#
# @dp.callback_query_handler(text="buy_vip")
# async def buy_vip(call: types.CallbackQuery):
#     if db.is_vip(call.from_user.id):
#         await call.answer(text="–í—ã —É–∂–µ VIP üôÉ", show_alert=True)
#         return False
#     bill = pay.get_bill(COST_OF_VIP, call.from_user.id)
#     pay_murkup = InlineKeyboardMarkup(row_width=2)
#     pay_btn = InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å \U0001F4B0", url=bill.pay_url)
#     check_btn = InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä—Ç—å –ø–ª–∞—Ç—ë–∂ \U00002705", callback_data=f"check_pay_{bill.bill_id}")
#     cancel_btn = InlineKeyboardButton("–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞)", callback_data=f"cancel_buy_vip_{bill.bill_id}")
#     pay_murkup.add(pay_btn, check_btn, cancel_btn)
#     await bot.send_message(call.from_user.id,
#                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å VIP –¥–æ—Å—Ç—É–ø–∞: {COST_OF_VIP}—Ä—É–±.\n"
#                            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã {bill.pay_url}\n"
#                            f"<b>–°–æ–≤–µ—Ç: </b> –æ–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Å QIWI-–∫–æ—à–µ–ª—å–∫–∞ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏",
#                            reply_markup=pay_murkup,
#                            parse_mode="HTML")
#     await call.answer()
#
# @dp.callback_query_handler(text_contains="check_pay_")
# async def check_pay(call):
#     if call.data[:10] == "check_pay_":
#         resp = pay.check_bill(call.data[10:])
#         if resp == 0:
#             await bot.send_message(call.message.chat.id,
#                                    "–í—ã –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É \U0000274C\n–ò–ª–∏ —Å—á—ë—Ç —É–∂–µ –æ–ø–ª–∞—á–µ–Ω \U00002705")
#         elif resp == 1:
#             await bot.send_message(call.message.chat.id,
#                                    f"–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç. –û—à–∏–±–∫–∞? —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ADMIN_USERNAME}, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π id —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã\n")
#         elif resp == 2:
#             db.give_vip(call.from_user.id)
#             await bot.send_message(call.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! \U0001F389")
#             db.delete_check(call.data[10:])
#             await bot.delete_message(call.from_user.id, call.message.message_id)
#     await call.answer()
#
# @dp.callback_query_handler(text_contains="cancel_buy_vip_")
# async def cancel_pay(call):
#     if call.data[:15] == "cancel_buy_vip_":
#         db.delete_check(call.data[15:])
#         await bot.delete_message(call.from_user.id, call.message.message_id)
#         await call.answer(text="–°—á—ë—Ç —É–¥–∞–ª—ë–Ω", show_alert=True)
# -------------commands-------------


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, )
